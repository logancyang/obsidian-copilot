import esbuild from "esbuild";
import svgPlugin from "esbuild-plugin-svg";
import process from "process";
import wasmPlugin from "./wasmPlugin.mjs";
import nodeModuleShim from "./nodeModuleShim.mjs";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

// Polyfill for import.meta in CommonJS context
if (typeof import_meta === 'undefined') {
  var import_meta = {
    url: typeof __filename !== 'undefined' ? 'file://' + __filename : 'file:///obsidian-plugin'
  };
}
`;

const prod = process.argv[2] === "production";

const context = await esbuild.context({
  banner: {
    js: banner,
  },
  entryPoints: ["src/main.ts"],
  bundle: true,
  external: [
    "obsidian",
    "electron",
    "@codemirror/autocomplete",
    "@codemirror/collab",
    "@codemirror/commands",
    "@codemirror/language",
    "@codemirror/lint",
    "@codemirror/search",
    "@codemirror/state",
    "@codemirror/view",
    "@lezer/common",
    "@lezer/highlight",
    "@lezer/lr",
    // Node.js built-in modules (available in Electron) - except node:module which we shim
    "node:fs",
    "node:path",
    "node:url",
    "node:buffer",
    "node:stream",
    "node:crypto",
    "node:async_hooks",
  ],
  format: "cjs",
  target: "es2020",
  logLevel: "info",
  sourcemap: prod ? false : "inline",
  treeShaking: true,
  outfile: "main.js",
  plugins: [nodeModuleShim, svgPlugin(), wasmPlugin],
  define: {
    global: "window",
    "process.env.NODE_ENV": prod ? '"production"' : '"development"',
    "import.meta.url": "import_meta.url",
  },
  minify: prod,
});

if (prod) {
  await context.rebuild();
  process.exit(0);
} else {
  await context.watch();
}
